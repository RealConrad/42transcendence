networks:
  transcendence:
    name: transcendence
    driver: bridge

services:
  # AUTH SERVICE
  authdb:
    image: postgres:13
    container_name: authdb
    environment:
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    networks:
      - transcendence
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d ${AUTH_POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  authservice:
    build: ./backend/auth_service
    container_name: authservice
    image: authservice
    restart: always
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - auth_media:/code/media
    depends_on:
      authdb:
        condition: service_healthy
    networks:
      - transcendence

# MFA SERVICE
  mfadb:
    image: postgres:13
    container_name: mfadb
    restart: always
    environment:
      POSTGRES_DB: ${MFA_POSTGRES_DB}
      POSTGRES_USER: ${MFA_POSTGRES_USER}
      POSTGRES_PASSWORD: ${MFA_POSTGRES_PASSWORD}
    env_file:
      - .env
    volumes:
      - mfa_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - transcendence
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d ${MFA_POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mfaservice:
    build: ./backend/mfa_service
    container_name: mfaservice
    image: mfaservice
    restart: always
    depends_on:
      mfadb:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8001:8001"
      - "8011:8011"
    networks:
      - transcendence

  # JWT SERVICE
  jwtdb:
    image: postgres:13
    container_name: jwtdb
    environment:
      POSTGRES_DB: ${JWT_POSTGRES_DB}
      POSTGRES_USER: ${JWT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${JWT_POSTGRES_PASSWORD}
    env_file:
      - .env
    ports:
      - "5434:5432"
    volumes:
      - jwt_postgres_data:/var/lib/postgresql/data
    networks:
      - transcendence
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d ${JWT_POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  jwtservice:
    build: ./backend/jwt_service
    container_name: jwtservice
    image: jwtservice
    restart: always
    env_file:
      - .env
    depends_on:
      jwtdb:
        condition: service_healthy
    ports:
      - "8002:8002"
    networks:
      - transcendence

  # GAME SERVICE
  gamedb:
    image: postgres:13
    container_name: gamedb
    environment:
      POSTGRES_DB: ${GAME_POSTGRES_DB}
      POSTGRES_USER: ${GAME_POSTGRES_USER}
      POSTGRES_PASSWORD: ${GAME_POSTGRES_PASSWORD}
    env_file:
      - .env
    ports:
      - "5435:5432"
    volumes:
      - game_postgres_data:/var/lib/postgresql/data
    networks:
      - transcendence
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d ${GAME_POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  gameservice:
    build: ./backend/game_service
    container_name: gameservice
    image: gameservice
    restart: always
    env_file:
      - .env
    depends_on:
      gamedb:
        condition: service_healthy
    ports:
      - "8003:8003"
    networks:
      - transcendence

  # FRIENDS SERVICE
  friendsdb:
    image: postgres:13
    container_name: friendsdb
    restart: always
    environment:
      POSTGRES_DB: ${FRIENDS_POSTGRES_DB}
      POSTGRES_USER: ${FRIENDS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${FRIENDS_POSTGRES_PASSWORD}
    env_file:
      - .env
    volumes:
      - friends_postgres_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - transcendence
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d ${FRIENDS_POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  friendsservice:
    build: ./backend/friends_service
    container_name: friendsservice
    image: friendsservice
    restart: always
    depends_on:
      friendsdb:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8004:8004"
    volumes:
      - friends_media:/code/media
    networks:
      - transcendence

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl/:ro
      - ./frontend:/var/www/transcendence:ro
      - auth_media:/var/www/media/auth:ro      # Mount auth media for Nginx
      - friends_media:/var/www/media/friends:ro
    networks:
      - transcendence

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - transcendence

  alertmanager:
    image: prom/alertmanager
    env_file:
      - .env
    volumes:
      - ./monitoring/alertmanager/config.sh:/config.sh
    # ports:
    #   - "9093:9093"
    networks:
        - transcendence
    entrypoint: ["sh", "/config.sh"]


  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    env_file:
      - .env
    depends_on:
      - prometheus
    volumes:
      - ./monitoring/grafana/config/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./monitoring/grafana/config/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./monitoring/grafana/dashboards/Container_Monitoring_Dashboard.json:/etc/grafana/dashboards/Container_Monitoring_Dashboard.json
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - transcendence

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
        - /:/rootfs:ro
        - /sys:/sys:ro
        - /var/run/docker.sock:/var/run/docker.sock:ro
        - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - transcendence

volumes:
  auth_postgres_data:
    name: transcendence_auth_postgres_data
  mfa_postgres_data:
    name: transcendence_mfa_postgres_data
  game_postgres_data:
    name: transcendence_game_postgres_data
  jwt_postgres_data:
    name: transcendence_jwt_postgres_data
  friends_postgres_data:
    name: transcendence_friends_postgres_data
  prometheus-data:
    name: transcendence_prometheus_data
  auth_media:
    name: transcendence_auth_media
  friends_media:
    name: transcendence_friends_media